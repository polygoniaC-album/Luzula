[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var matrice = []
var CMatrice
var R = range(31)

var font = load(\"res://polygonalLabel/dynamicfont.tres\")

func _ready():
	import_csv()
	truncMatrice()
	CMatrice = iter()

func truncMatrice():
	for i in R:
		for j in R:
			if !((i + 1) in global.access) or !((j + 1) in global.access):
				matrice[i][j] = 0

func import_csv():
	var file:File = File.new()
	file.open(\"res://tools/connexion.csv\", File.READ)
	var line:String = file.get_line()
	while !file.eof_reached():
		var lineArray = line.split(',')
		var lineArray2 = []
		for i in range(lineArray.size()):
			lineArray2.append(int(lineArray[i]))
		matrice.append(lineArray2)
		line = file.get_line()

func iter(n:int = 32, IMatrice = matrice.duplicate()):
	print(n)
	if n == 0:
		print(IMatrice)
		return IMatrice
	else:
		var RMatrice = []
		for i in R:
			RMatrice.append([])
			for j in R:
				var nchemin:int = matrice[i][j]
				for k in R:
					nchemin += IMatrice[i][k] * matrice[k][j]
				RMatrice[i].append(nchemin)
		return iter(n - 1, RMatrice)

func _draw():
	draw(CMatrice)

func draw(DMatrice):
	for i in range(DMatrice.size()):
		var color:Color = Color.red
		if DMatrice[21][i]:
			color = Color.darkorange
		draw_string(font, Vector2(0, i*33 + 70), String(i + 1), color)
		draw_string(font, Vector2(i * 58 + 70, 30), String(i + 1), color)
		for j in range(DMatrice[i].size()):
			color = Color.black
			if i == 21:
				color = Color.darkmagenta
			draw_string(font, Vector2(j * 58 + 70, i*33 + 70), String(min(1, DMatrice[i][j])), color)
"

[node name="Node2D" type="Node2D"]
script = SubResource( 1 )
